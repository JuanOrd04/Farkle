import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

public class farkle {

    JFrame ventana = new JFrame("Farkle");
    JPanel contenedorInicio = new JPanel();
    JPanel contenedorJuego = new JPanel(new BorderLayout());
    JPanel contenedorDados = new JPanel(new GridLayout(2, 3));
    JPanel contenedorBotones = new JPanel(new GridLayout(1, 3));
    JPanel contenedorEtiquetas = new JPanel(new GridLayout(4, 1));

    JButton[] botonesDados = new JButton[6];
    ImageIcon[] iconosImagenes = new ImageIcon[6];
    int[] estadoBoton = new int[6];
    int[] valorDado = new int[6];

    final int DADO_CALIENTE = 0;
    final int DADO_PUNTUADO = 1;
    final int DADO_BLOQUEADO = 2;

    JButton botonTirar = new JButton("Tirar Dados");
    JButton botonPuntuar = new JButton("Puntuar");
    JButton botonParar = new JButton("Parar");

    JLabel etiquetaPuntajeActual = new JLabel("Puntaje actual: 0");
    JLabel etiquetaPuntajeTotal = new JLabel("Puntaje total: 0");
    JLabel etiquetaRondaActual = new JLabel("Ronda: 1");
    JLabel etiquetaTurnoJugador = new JLabel("Turno de Jugador 1");

    int puntajeActual = 0;
    int rondaActual = 1;
    int jugadorActual = 0;

    int jugadores = 0;
    int puntosParaGanar = 0;
    int[] puntajes;

    boolean rondaExtraActivada = false;
    int jugadorQueAlcanzoMeta = -1;
    int jugadoresRestantesRondaExtra = 0;

    public farkle() {
        ventana.setSize(600, 600);
        ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mostrarPantallaInicio();
        ventana.setVisible(true);
    }

    private void mostrarPantallaInicio() {
        contenedorInicio.removeAll();
        contenedorInicio.setLayout(new BorderLayout());

        JLabel imagenLabel = new JLabel(new ImageIcon("src/img/farkle.png"));
        contenedorInicio.add(imagenLabel, BorderLayout.CENTER);

        JPanel panelBotones = new JPanel(new FlowLayout());
        JButton botonJugar = new JButton("Jugar");
        JButton botonSalir = new JButton("Salir");

        botonJugar.addActionListener(e -> {
            pedirDatosIniciales();
            iniciarJuego();
        });

        botonSalir.addActionListener(e -> System.exit(0));

        panelBotones.add(botonJugar);
        panelBotones.add(botonSalir);
        contenedorInicio.add(panelBotones, BorderLayout.SOUTH);

        ventana.setContentPane(contenedorInicio);
        ventana.revalidate();
        ventana.repaint();
    }

    private void mostrarPantallaInicioDesdeJuego() {
        jugadores = 0;
        puntosParaGanar = 0;
        puntajeActual = 0;
        jugadorActual = 0;
        rondaActual = 1;
        rondaExtraActivada = false;
        jugadorQueAlcanzoMeta = -1;
        jugadoresRestantesRondaExtra = 0;
        mostrarPantallaInicio();
    }

    private void pedirDatosIniciales() {
        String jugadoresStr = JOptionPane.showInputDialog(ventana, "¿Cuántos jugadores van a jugar?");
        if (jugadoresStr != null) {
            jugadores = Integer.parseInt(jugadoresStr);
        }

        String puntosStr = JOptionPane.showInputDialog(ventana, "¿Cuántos puntos se necesitan para ganar?");
        if (puntosStr != null) {
            puntosParaGanar = Integer.parseInt(puntosStr);
        }

        puntajes = new int[jugadores];
    }

    private void iniciarJuego() {
        puntajeActual = 0;
        jugadorActual = 0;
        rondaActual = 1;
        rondaExtraActivada = false;
        jugadorQueAlcanzoMeta = -1;
        jugadoresRestantesRondaExtra = 0;
        puntajes = new int[jugadores];

        for (int i = 0; i < 6; i++) {
            iconosImagenes[i] = new ImageIcon("src/img/Dado" + (i + 1) + ".png");
        }

        contenedorDados.removeAll();
        for (int i = 0; i < 6; i++) {
            final int index = i;
            botonesDados[i] = new JButton();
            botonesDados[i].setEnabled(false);
            botonesDados[i].setBackground(Color.WHITE);
            for (ActionListener al : botonesDados[i].getActionListeners()) {
                botonesDados[i].removeActionListener(al);
            }
            botonesDados[i].addActionListener(e -> toggleDado(index));
            estadoBoton[i] = DADO_CALIENTE;
            botonesDados[i].setIcon(iconosImagenes[i]);
            contenedorDados.add(botonesDados[i]);
        }

        contenedorBotones.removeAll();
        for (ActionListener al : botonTirar.getActionListeners()) {
            botonTirar.removeActionListener(al);
        }
        for (ActionListener al : botonPuntuar.getActionListeners()) {
            botonPuntuar.removeActionListener(al);
        }
        for (ActionListener al : botonParar.getActionListeners()) {
            botonParar.removeActionListener(al);
        }

        botonTirar.addActionListener(e -> tirarDados());
        botonPuntuar.addActionListener(e -> puntuar());
        botonParar.addActionListener(e -> parar());

        botonTirar.setEnabled(true);
        botonPuntuar.setEnabled(false);
        botonParar.setEnabled(false);

        contenedorBotones.add(botonTirar);
        contenedorBotones.add(botonPuntuar);
        contenedorBotones.add(botonParar);

        contenedorEtiquetas.removeAll();
        contenedorEtiquetas.add(etiquetaTurnoJugador);
        contenedorEtiquetas.add(etiquetaPuntajeActual);
        contenedorEtiquetas.add(etiquetaPuntajeTotal);
        contenedorEtiquetas.add(etiquetaRondaActual);

        contenedorJuego.removeAll();
        contenedorJuego.add(contenedorBotones, BorderLayout.NORTH);
        contenedorJuego.add(contenedorDados, BorderLayout.CENTER);
        contenedorJuego.add(contenedorEtiquetas, BorderLayout.SOUTH);

        ventana.setContentPane(contenedorJuego);
        ventana.revalidate();
        ventana.repaint();

        actualizarEtiquetas();
    }

    private void tirarDados() {
        for (int i = 0; i < botonesDados.length; i++) {
            if (estadoBoton[i] == DADO_CALIENTE) {
                int valor = (int) (Math.random() * 6);
                valorDado[i] = valor;
                botonesDados[i].setIcon(iconosImagenes[valor]);
                botonesDados[i].setEnabled(true);
            }
        }
        botonTirar.setEnabled(false);
        botonPuntuar.setEnabled(true);
        botonParar.setEnabled(false);
    }

    private void puntuar() {
        int[] conteoValores = new int[7];
        for (int i = 0; i < botonesDados.length; i++) {
            if (estadoBoton[i] == DADO_PUNTUADO) {
                conteoValores[valorDado[i] + 1]++;
            }
        }

        if ((conteoValores[2] > 0 && conteoValores[2] < 3) ||
                (conteoValores[3] > 0 && conteoValores[3] < 3) ||
                (conteoValores[4] > 0 && conteoValores[4] < 3) ||
                (conteoValores[6] > 0 && conteoValores[6] < 3)) {
            JOptionPane.showMessageDialog(ventana, "El valor del dado es incorrecto");
        } else if (conteoValores[1] == 0 && conteoValores[2] == 0 && conteoValores[3] == 0 &&
                conteoValores[4] == 0 && conteoValores[5] == 0 && conteoValores[6] == 0) {
            int elegirCuadro = JOptionPane.showConfirmDialog(ventana, "¿Quieres abandonar tu puntuación?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (elegirCuadro == JOptionPane.YES_OPTION) {
                puntajeActual = 0;
                pasarAlSiguienteJugador();
            }
        } else {
            if (conteoValores[1] >= 3) puntajeActual += (conteoValores[1] - 2) * 1000;
            if (conteoValores[2] >= 3) puntajeActual += (conteoValores[2] - 2) * 200;
            if (conteoValores[3] >= 3) puntajeActual += (conteoValores[3] - 2) * 300;
            if (conteoValores[4] >= 3) puntajeActual += (conteoValores[4] - 2) * 400;
            if (conteoValores[5] >= 3) puntajeActual += (conteoValores[5] - 2) * 500;
            if (conteoValores[6] >= 3) puntajeActual += (conteoValores[6] - 2) * 600;
            if (conteoValores[1] < 3) puntajeActual += conteoValores[1] * 100;
            if (conteoValores[5] < 3) puntajeActual += conteoValores[5] * 50;

            etiquetaPuntajeActual.setText("Puntaje actual: " + puntajeActual);

            for (int a = 0; a < botonesDados.length; a++) {
                if (estadoBoton[a] == DADO_PUNTUADO) {
                    estadoBoton[a] = DADO_BLOQUEADO;
                    botonesDados[a].setBackground(Color.PINK);
                }
                botonesDados[a].setEnabled(false);
            }

            long bloqueados = java.util.Arrays.stream(estadoBoton).filter(estado -> estado == DADO_BLOQUEADO).count();
            if (bloqueados == 6) {
                for (int a = 0; a < botonesDados.length; a++) {
                    estadoBoton[a] = DADO_CALIENTE;
                    botonesDados[a].setBackground(Color.WHITE);
                }
            }

            botonTirar.setEnabled(true);
            botonPuntuar.setEnabled(false);
            botonParar.setEnabled(true);
        }
    }

    private void parar() {
        puntajes[jugadorActual] += puntajeActual;
        if (puntajes[jugadorActual] >= puntosParaGanar && !rondaExtraActivada) {
            rondaExtraActivada = true;
            jugadorQueAlcanzoMeta = jugadorActual;
            jugadoresRestantesRondaExtra = jugadores - 1;
            JOptionPane.showMessageDialog(ventana, "¡Jugador " + (jugadorActual + 1) + " alcanzó el puntaje para ganar!\nLos demás jugadores tendrán una ronda más.");
        }
        pasarAlSiguienteJugador();
    }

    private void toggleDado(int i) {
        if (estadoBoton[i] == DADO_CALIENTE) {
            botonesDados[i].setBackground(Color.BLUE);
            estadoBoton[i] = DADO_PUNTUADO;
        } else {
            botonesDados[i].setBackground(Color.WHITE);
            estadoBoton[i] = DADO_CALIENTE;
        }
    }

    private void pasarAlSiguienteJugador() {
        puntajeActual = 0;

        if (rondaExtraActivada && jugadorActual != jugadorQueAlcanzoMeta) {
            jugadoresRestantesRondaExtra--;
            if (jugadoresRestantesRondaExtra == 0) {
                mostrarGanador();
                return;
            }
        }

        jugadorActual = (jugadorActual + 1) % jugadores;
        rondaActual++;
        actualizarEtiquetas();
        dadoReiniciar();
    }

    private void mostrarGanador() {
        int maxPuntaje = -1;
        int indiceGanador = -1;
        StringBuilder resultado = new StringBuilder("Puntajes finales:\n");
        for (int i = 0; i < jugadores; i++) {
            resultado.append("Jugador ").append(i + 1).append(": ").append(puntajes[i]).append(" puntos\n");
            if (puntajes[i] > maxPuntaje) {
                maxPuntaje = puntajes[i];
                indiceGanador = i;
            }
        }
        resultado.append("\n¡Ganador: Jugador ").append(indiceGanador + 1).append("!");
        JOptionPane.showMessageDialog(ventana, resultado.toString());
        mostrarPantallaInicioDesdeJuego();
    }

    private void actualizarEtiquetas() {
        etiquetaPuntajeActual.setText("Puntaje actual del jugador: 0");
        etiquetaPuntajeTotal.setText("Puntaje total del jugador: " + puntajes[jugadorActual]);
        etiquetaRondaActual.setText("Ronda: " + rondaActual);
        etiquetaTurnoJugador.setText("Turno de Jugador " + (jugadorActual + 1));
    }

    private void dadoReiniciar() {
        for (int a = 0; a < botonesDados.length; a++) {
            botonesDados[a].setEnabled(false);
            estadoBoton[a] = DADO_CALIENTE;
            botonesDados[a].setBackground(Color.WHITE);
        }
        botonTirar.setEnabled(true);
        botonPuntuar.setEnabled(false);
        botonParar.setEnabled(false);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(farkle::new);
    }
}
